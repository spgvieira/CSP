import java.text.SimpleDateFormat

/**
    To run the experiement on the server you need to make that we are using java14. 
    To do so we first need to run $export JAVA_HOME/usr/lib/jvm/java-14-openjdk-amd64
    Then inside Assignment2 directory we can run ./gradlew
 */

plugins {
    id 'java'
}

ext {
    spectralNormInputs = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]
    mandelbrotInputs = [256, 512, 1024, 2048, 4096, 8192, 16384]
    threads = [1, 2, 4, 8, 16, 32]
    repeat = 5
    perfEventsList = 'cpu_cycles,context-switches,cpu-migrations,page-faults,major-faults,dTLB-load-misses,cache-misses,instructions'
    resultsDir = file("experimental_results")
    memDir = file("mem_reports")
    perfDir = file("perf_reports")
}

def registerMemoryTask(name, groupName, mainClassName, algo, isParallel = false, inputList){
    tasks.register(name, JavaExec) {
        group = groupName
        classpath = sourceSets.main.runtimeClasspath
        mainClass.set(mainClassName)

        doFirst {
            def dateStr = new SimpleDateFormat("dd_MM").format(new Date())
            def fileName = "${dateStr}_${groupName}.csv"
            def timeFile = file("${resultsDir}/${algo}/${fileName}")
            def memFile = file("${memDir}/${algo}/${fileName}")

            project.ext["${name}_timeFile"] = timeFile
            project.ext["${name}_memFile"] = memFile

            timeFile.text = isParallel ?
                "input,thread,${(1..repeat).collect { "time${it}" }.join(',')}\n" :
                "input,${(1..repeat).collect { "time${it}" }.join(',')}\n"
            // memReportFile.text = "Input,Thread,Timestamp,MemoryUsage(MB)\n"
        }
        doLast {
            def timeFile = project.ext["${name}_timeFile"]
            def memFile = project.ext["${name}_memFile"]
            def inputs = inputList
            def threads = project.ext.threads
            def repeat = project.ext.repeat 

            def memoryScript = file("memory.sh").absolutePath

            inputs.each { inputSize ->
                def threadLoop = isParallel ? threads : [null]
                threadLoop.each { threadCount ->
                    println "Running with input size $inputSize" + (isParallel ? " and threads $threadCount" : "")
                    def times = []
                    for (int i = 0; i < repeat; i++) {
                        def argsList = isParallel ? [inputSize.toString(), threadCount.toString()] : [inputSize.toString()]

                        def processBuilder = new ProcessBuilder(
                            "java", "-cp", classpath.asPath, mainClassName, *argsList
                        )

                        def process = processBuilder.start()
                        def pid = process.pid()

                        def memScriptProcess = new ProcessBuilder(
                            "sh", memoryScript, pid.toString(), memFile.absolutePath, *argsList
                        ).inheritIO().start()

                        def reader = new BufferedReader(new InputStreamReader(process.inputStream))
                        def output = new StringBuilder()
                        String line
                        while ((line = reader.readLine()) != null) {
                            output.append(line).append("\n")
                        }

                        process.waitFor()
                        memScriptProcess.waitFor()

                        def timeTaken = output.toString().trim()
                        times.add(timeTaken)
                    }

                    def line = isParallel ? "$inputSize,$threadCount,${times.join(',')}" : "$inputSize,${times.join(',')}"
                    timeFile << "$line\n"
                }
            }
        }
    }
}

def registerPerfTask(name, groupName, mainClassName, algo, isParallel = false, inputList) {
    tasks.register(name, JavaExec) {
        group = groupName
        classpath = sourceSets.main.runtimeClasspath
        mainClass.set(mainClassName)

        doFirst {
            def dateStr = new SimpleDateFormat("dd_MM").format(new Date())
            def fileName = "${dateStr}_${groupName}"
            def timeFile = file("${resultsDir}/${algo}/${fileName}.csv")
            def perfReportFile = file("${perfDir}/${algo}/${fileName}.txt")
            project.ext["${name}_timeFile"] = timeFile
            project.ext["${name}_perfFile"] = perfReportFile

            timeFile.text = isParallel ?
                "input,thread,${(1..repeat).collect { "time${it}" }.join(',')}\n" :
                "input,${(1..repeat).collect { "time${it}" }.join(',')}\n"
        }

        doLast {
            def timeFile = project.ext["${name}_timeFile"]
            def perfReportFile = project.ext["${name}_perfFile"]
            def inputs = inputList
            def threads = project.ext.threads
            def perfEvents = project.ext.perfEventsList
            def repeat = project.ext.repeat

            inputs.each { inputSize ->
                def threadLoop = isParallel ? threads : [null]
                threadLoop.each { threadCount ->
                    println "Running with input size $inputSize" + (isParallel ? " and threads $threadCount" : "")
                    def times = []
                    for (int i = 0; i < repeat; i++) {
                        def argsList = isParallel ? [inputSize.toString(), threadCount.toString()] : [inputSize.toString()]

                        def processBuilder = new ProcessBuilder(
                            "perf", "stat",
                            "-e", perfEvents,
                            "-o", perfReportFile.absolutePath, "--append",
                            "java", "-cp", classpath.asPath, mainClassName, *argsList
                        )
                        def process = processBuilder.start()

                        def reader = new BufferedReader(new InputStreamReader(process.inputStream))
                        def output = new StringBuilder()
                        String line
                        while ((line = reader.readLine()) != null) {
                            output.append(line).append("\n")
                        }
                        process.waitFor()
                        def timeTaken = output.toString().trim()
                        times.add(timeTaken)
                    }

                    def line = isParallel ? "$inputSize,$threadCount,${times.join(',')}" : "$inputSize,${times.join(',')}"
                    timeFile << "$line\n"
                }
            }
        }
    }
}

// New task to record baseline memory usage for 3 minutes
tasks.register('recordBaselineMemory', Exec) {
    group = 'memory'
    def dateStr = new SimpleDateFormat("dd_MM").format(new Date())
    def baselineMemFile = file("${memDir}/baseline/${dateStr}_baseline.csv").absolutePath
    def memoryScript = file("memory.sh").absolutePath // Assuming your combined script is named this

    commandLine 'sh', memoryScript, 'baseline', baselineMemFile

    // Keep the script running for 3 minutes (180 seconds) and then kill it
    doFirst {
        println "Starting baseline memory recording for 3 minutes..."
    }
    doLast {
        println "Baseline memory recording finished. Data saved to: $baselineMemFile"
        // Attempt to gracefully kill the process if it's still running (though the while loop should handle this)
        try {
            def pid = project.exec { commandLine 'pgrep', '-f', "sh ${memoryScript} baseline" }.standardOutput.text.trim()
            if (pid) {
                project.exec { commandLine 'kill', pid }
                println "Successfully terminated baseline recording process (if it was still running)."
            }
        } catch (Exception e) {
            println "Could not find and terminate the baseline recording process (it might have already finished)."
        }
    }
    finalizedBy 'stopBaselineMemoryRecording'
}

// Task to stop the baseline memory recording (in case it runs longer than expected)
tasks.register('stopBaselineMemoryRecording', Exec) {
    group = 'memory'
    def memoryScript = file("memory.sh").absolutePath

    commandLine 'pkill', '-f', "sh ${memoryScript} baseline"
    doLast {
        println "Attempted to stop baseline memory recording."
    }
    onlyIf {
        try {
            return !project.exec { commandLine 'pgrep', '-f', "sh ${memoryScript} baseline" }.standardOutput.text.trim().isEmpty()
        } catch (Exception e) {
            return false // Process likely not running
        }
    }
}

registerMemoryTask("memoryImperativeSequentialSpectralNorm", "imperative_sequential", "assignment2.SpectralNorm.ImperativeSequentialSpectralNorm", "spectral_norm",false, spectralNormInputs)
registerMemoryTask("memoryImperativeParallelSpectralNorm", "imperative_parallel", "assignment2.SpectralNorm.ImperativeParallelSpectralNorm", "spectral_norm",true, spectralNormInputs)
registerMemoryTask("memoryFunctionalSequentialSpectralNorm", "functional_sequential", "assignment2.SpectralNorm.FunctionalSequentialSpectralNorm", "spectral_norm",false, spectralNormInputs)
registerMemoryTask("memoryFunctionalParallelSpectralNorm", "functional_parallel", "assignment2.SpectralNorm.FunctionalParallelSpectralNorm", "spectral_norm",true, spectralNormInputs)

registerPerfTask("perfImperativeSequentialSpectralNorm", "imperative_sequential", "assignment2.SpectralNorm.ImperativeSequentialSpectralNorm", "spectral_norm",false, spectralNormInputs)
registerPerfTask("perfImperativeParallelSpectralNorm", "imperative_parallel", "assignment2.SpectralNorm.ImperativeParallelSpectralNorm", "spectral_norm",true, spectralNormInputs)
registerPerfTask("perfFunctionalSequentialSpectralNorm", "functional_sequential", "assignment2.SpectralNorm.FunctionalSequentialSpectralNorm", "spectral_norm",false, spectralNormInputs)
registerPerfTask("perfFunctionalParallelSpectralNorm", "functional_parallel", "assignment2.SpectralNorm.FunctionalParallelSpectralNorm", "spectral_norm",true, spectralNormInputs)

registerMemoryTask("memoryImperativeSequentialMandelbrot", "imperative_sequential", "assignment2.Mandelbrot.ImperativeSequentialMandelbrot", "mandelbrot",false, mandelbrotInputs)
registerMemoryTask("memoryImperativeParallelMandelbrot", "imperative_parallel", "assignment2.SMandelbrot.ImperativeParallelMandelbrot", "mandelbrot",true, mandelbrotInputs)
registerMemoryTask("memoryFunctionalSequentialMandelbrot", "functional_sequential", "assignment2.Mandelbrot.FunctionalSequentialMandelbrot", "mandelbrot",false, mandelbrotInputs)
registerMemoryTask("memoryFunctionalParallelMandelbrot", "functional_parallel", "assignment2.Mandelbrot.FunctionalParallelMandelbrot", "mandelbrot",true, mandelbrotInputs)

registerPerfTask("perfImperativeSequentialMandelbrot", "imperative_sequential", "assignment2.Mandelbrot.ImperativeSequentialMandelbrot", "mandelbrot",false, mandelbrotInputs)
registerPerfTask("perfImperativeParallelMandelbrot", "imperative_parallel", "assignment2.Mandelbrot.ImperativeParallelMandelbrot", "mandelbrot",true, mandelbrotInputs)
registerPerfTask("perfFunctionalSequentialMandelbrot", "functional_sequential", "assignment2.Mandelbrot.FunctionalSequentialMandelbrot", "mandelbrot",false, mandelbrotInputs)
registerPerfTask("perfFunctionalParallelMandelbrot", "functional_parallel", "assignment2.Mandelbrot.FunctionalParallelMandelbrot", "mandelbrot",true, mandelbrotInputs)

tasks.register("runMemorySpectralNorm") {
    dependsOn("memoryImperativeSequentialSpectralNorm", "memoryImperativeParallelSpectralNorm", "memoryFunctionalSequentialSpectralNorm", "memoryFunctionalParallelSpectralNorm","recordBaselineMemory")
    group = "memory"
}

tasks.register("runPerfSpectralNorm") {
    dependsOn("perfImperativeSequentialSpectralNorm", "perfImperativeParallelSpectralNorm", "perfFunctionalSequentialSpectralNorm", "perfFunctionalParallelSpectralNorm")
    group = "performance"
}

tasks.register("runMemoryMandelbrot") {
    dependsOn("memoryImperativeSequentialMandelbrot", "memoryImperativeParallelMandelbrot", "memoryFunctionalSequentialMandelbrot", "memoryFunctionalParallelMandelbrot","recordBaselineMemory")
    group = "memory"
}

tasks.register("runPerfMandelbrot") {
    dependsOn("perfImperativeSequentialMandelbrot", "perfImperativeParallelMandelbrot", "perfFunctionalSequentialMandelbrot", "perfFunctionalParallelMandelbrot")
    group = "performance"
}