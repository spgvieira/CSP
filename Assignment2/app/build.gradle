import java.text.SimpleDateFormat

plugins {
    id 'java'
}


def resultsDir = file("experimental_results")
def inputs = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]
def dateStr = new SimpleDateFormat("dd_MM").format(new Date())

tasks.register("imperativeSequentialSpectralNorm", JavaExec) {
    group = "imperative_sequential"

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("assignment2.ImperativeSequentialSpectralNorm") 

    def groupName = group
    def timeFileName = "${dateStr}_${groupName}_time.csv"
    def timeFile = file("${resultsDir}/${timeFileName}")

    doFirst {
        timeFile.text = "input,time_taken\n"
    }

    doLast {
        inputs.each { inputSize ->
            println "Running with input size $inputSize"
            def output = new ByteArrayOutputStream()
            exec {
                commandLine 'java', '-cp', classpath.asPath, mainClass.get(), inputSize.toString()
                standardOutput = output
                errorOutput = output
                ignoreExitValue = true
            }
            def timeTaken = output.toString().trim()
            timeFile << "$inputSize,$timeTaken\n"
        }
    }
}

tasks.register("imperativeParallelSpectralNorm", JavaExec) {
    group = "imperative_parallel"

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("assignment2.ImperativeParallelSpectralNorm") // Use mainClass.set()

    def groupName = group
    def timeFileName = "${dateStr}_${groupName}_time.csv"
    def timeFile = file("${resultsDir}/${timeFileName}")

    doFirst {
        timeFile.text = "input,time_taken\n"
    }

    doLast {
        inputs.each { inputSize ->
            println "Running with input size $inputSize"
            def output = new ByteArrayOutputStream()
            exec {
                commandLine 'java', '-cp', classpath.asPath, mainClass.get(), inputSize.toString()
                standardOutput = output
                errorOutput = output
                ignoreExitValue = true
            }
            def timeTaken = output.toString().trim()
            timeFile << "$inputSize,$timeTaken\n"
        }
    }
}

tasks.register("functionalSequentialSpectralNorm", JavaExec) {
    group = "functional_sequential"

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("assignment2.FunctionalSequentialSpectralNorm") // Use mainClass.set()

    def groupName = group
    def timeFileName = "${dateStr}_${groupName}_time.csv"
    def timeFile = file("${resultsDir}/${timeFileName}")

    doFirst {
        timeFile.text = "input,time_taken\n"
    }

    doLast {
        inputs.each { inputSize ->
            println "Running with input size $inputSize"
            def output = new ByteArrayOutputStream()
            exec {
                commandLine 'java', '-cp', classpath.asPath, mainClass.get(), inputSize.toString()
                standardOutput = output
                errorOutput = output
                ignoreExitValue = true
            }
            def timeTaken = output.toString().trim()
            timeFile << "$inputSize,$timeTaken\n"
        }
    }
}

tasks.register("functionalParallelSpectralNorm", JavaExec) {
    group = "functional_parallel"

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("assignment2.FunctionalParallelSpectralNorm") // Use mainClass.set()

    def groupName = group
    def timeFileName = "${dateStr}_${groupName}_time.csv"
    def timeFile = file("${resultsDir}/${timeFileName}")

    doFirst {
        timeFile.text = "input,time_taken\n"
    }

    doLast {
        inputs.each { inputSize ->
            println "Running with input size $inputSize"
            def output = new ByteArrayOutputStream()
            exec {
                commandLine 'java', '-cp', classpath.asPath, mainClass.get(), inputSize.toString()
                standardOutput = output
                errorOutput = output
                ignoreExitValue = true
            }
            def timeTaken = output.toString().trim()
            timeFile << "$inputSize,$timeTaken\n"
        }
    }
}

